/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/install/settings": {
    get: operations["GetInstallSettings"];
  };
  "/install/setup": {
    post: operations["PostInstallSetup"];
  };
  "/install/validateDatabase": {
    post: operations["PostInstallValidateDatabase"];
  };
  "/manifests": {
    get: operations["Manifests"];
  };
  "/manifests/packages": {
    get: operations["ManifestsPackages"];
  };
  "/manifests/packages/installed": {
    get: operations["ManifestsPackagesInstalled"];
  };
  "/published-cache/status": {
    get: operations["PublishedCacheStatus"];
  };
  "/published-cache/reload": {
    post: operations["PublishedCacheReload"];
  };
  "/published-cache/rebuild": {
    post: operations["PublishedCacheRebuild"];
  };
  "/published-cache/collect": {
    get: operations["PublishedCacheCollect"];
  };
  "/server/status": {
    get: operations["GetStatus"];
  };
  "/server/version": {
    get: operations["GetVersion"];
  };
  "/upgrade/settings": {
    get: operations["GetUpgradeSettings"];
  };
  "/upgrade/authorize": {
    post: operations["PostUpgradeAuthorize"];
  };
  "/user": {
    get: operations["GetUser"];
  };
  "/user/login": {
    post: operations["PostUserLogin"];
  };
  "/user/logout": {
    post: operations["PostUserLogout"];
  };
  "/user/sections": {
    get: operations["GetAllowedSections"];
  };
  "/telemetry/ConsentLevel": {
    get: operations["GetConsentLevel"];
    post: operations["PostConsentLevel"];
  };
  "/telemetry/ConsentLevels": {
    get: operations["ConsentLevels"];
  };
  "/search/index": {
    get: operations["getIndexers"];
  };
  "/search/index/{indexName}": {
    get: operations["getIndex"];
  };
  "/search/index/{indexName}/rebuild": {
    post: operations["postIndexRebuild"];
  };
  "/search/searcher": {
    get: operations["getSearchers"];
  };
  "/search/searcher/{searcherName}": {
    get: operations["getSearchSearchers"];
  };
}

export interface components {
  schemas: {
    /** @enum {string} */
    ConsentLevel: "Minimal" | "Basic" | "Detailed";
    TelemetryModel: {
      level: components["schemas"]["ConsentLevel"];
      description: string;
    };
    InstallUserModel: {
      /** Format: float */
      minCharLength: number;
      /** Format: float */
      minNonAlphaNumericLength: number;
      consentLevels: components["schemas"]["TelemetryModel"][];
    };
    InstallDatabaseModel: {
      id: string;
      /** Format: float */
      sortOrder: number;
      displayName: string;
      defaultDatabaseName: string;
      providerName: string | null;
      isConfigured: boolean;
      requiresServer: boolean;
      serverPlaceholder: string | null;
      requiresCredentials: boolean;
      supportsIntegratedAuthentication: boolean;
      requiresConnectionTest: boolean;
    };
    InstallSettingsResponse: {
      user: components["schemas"]["InstallUserModel"];
      databases: components["schemas"]["InstallDatabaseModel"][];
    };
    ProblemDetails: {
      type: string;
      /** Format: float */
      status: number;
      title?: string;
      detail?: string;
      instance?: string;
      errors?: { [key: string]: unknown };
    };
    InstallSetupUserConfiguration: {
      name: string;
      email: string;
      password: string;
      subscribeToNewsletter: boolean;
    };
    InstallSetupDatabaseConfiguration: {
      id?: string;
      server?: string | null;
      password?: string | null;
      username?: string | null;
      name?: string | null;
      providerName?: string | null;
      useIntegratedAuthentication?: boolean | null;
      connectionString?: string | null;
    };
    InstallSetupRequest: {
      user: components["schemas"]["InstallSetupUserConfiguration"];
      telemetryLevel: components["schemas"]["ConsentLevel"];
      database?: components["schemas"]["InstallSetupDatabaseConfiguration"];
    };
    ManifestsResponse: {
      manifests: { [key: string]: unknown }[];
    };
    PackageInstalled: {
      id: string;
      name: string;
      alias: string;
      version: string;
      hasMigrations: boolean;
      hasPendingMigrations: boolean;
      plans: { [key: string]: unknown }[];
    };
    ManifestsPackagesInstalledResponse: {
      packages: components["schemas"]["PackageInstalled"][];
    };
    /** @enum {string} */
    ServerStatus: "running" | "must-install" | "must-upgrade";
    StatusResponse: {
      serverStatus: components["schemas"]["ServerStatus"];
    };
    VersionResponse: {
      version: string;
    };
    UpgradeSettingsResponse: {
      currentState: string;
      newState: string;
      newVersion: string;
      oldVersion: string;
      reportUrl: string;
    };
    UserResponse: {
      username: string;
      role: string;
    };
    UserLoginRequest: {
      username: string;
      password: string;
      persist: boolean;
    };
    AllowedSectionsResponse: {
      sections: string[];
    };
    ConsentLevelSettings: {
      telemetryLevel: components["schemas"]["ConsentLevel"];
    };
    ProviderPropertiesModel: {
      /** Format: float */
      CommitCount: number;
      DefaultAnalyzer: string;
      /** Format: float */
      DocumentCount: number;
      /** Format: float */
      FieldCount: number;
      LuceneDirectory: string;
      LuceneIndexFolder: string;
      DirectoryFactory: string;
      EnableDefaultEventHandler: boolean;
      PublishedValuesOnly: boolean;
      SupportProtectedContent: boolean;
      IncludeFields?: string[];
    };
    IndexModel: {
      name: string;
      canRebuild: boolean;
      healthStatus: string;
      isHealthy: boolean;
      providerProperties: components["schemas"]["ProviderPropertiesModel"];
    };
    SearcherModel: {
      name: string;
      providerProperties: components["schemas"]["ProviderPropertiesModel"];
    };
    FieldViewModel: {
      name: string;
      values: string[];
    };
    SearchResultsModel: {
      /** Format: float */
      id: number;
      name: string;
      fields: components["schemas"]["FieldViewModel"][];
      /** Format: float */
      score: number;
    };
  };
}

export interface operations {
  GetInstallSettings: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["InstallSettingsResponse"];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  PostInstallSetup: {
    parameters: {};
    responses: {
      /** 201 response */
      201: unknown;
      /** 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstallSetupRequest"];
      };
    };
  };
  PostInstallValidateDatabase: {
    parameters: {};
    responses: {
      /** 201 response */
      201: unknown;
      /** 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstallSetupDatabaseConfiguration"];
      };
    };
  };
  Manifests: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["ManifestsResponse"];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  ManifestsPackages: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  ManifestsPackagesInstalled: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["ManifestsPackagesInstalledResponse"];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  PublishedCacheStatus: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  PublishedCacheReload: {
    parameters: {};
    responses: {
      /** 201 response */
      201: unknown;
      /** 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  PublishedCacheRebuild: {
    parameters: {};
    responses: {
      /** 201 response */
      201: unknown;
      /** 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  PublishedCacheCollect: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetStatus: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["StatusResponse"];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetVersion: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["VersionResponse"];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetUpgradeSettings: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["UpgradeSettingsResponse"];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  PostUpgradeAuthorize: {
    parameters: {};
    responses: {
      /** 201 response */
      201: unknown;
      /** 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetUser: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** 403 response */
      403: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  PostUserLogin: {
    parameters: {};
    responses: {
      /** 201 response */
      201: unknown;
      /** 403 response */
      403: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLoginRequest"];
      };
    };
  };
  PostUserLogout: {
    responses: {
      /** 201 response */
      201: unknown;
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetAllowedSections: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["AllowedSectionsResponse"];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetConsentLevel: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["ConsentLevelSettings"];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  PostConsentLevel: {
    parameters: {};
    responses: {
      /** 201 response */
      201: unknown;
      /** 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConsentLevelSettings"];
      };
    };
  };
  ConsentLevels: {
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  getIndexers: {
    parameters: {
      query: {
        skip: number;
        take: number;
      };
    };
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["IndexModel"][];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  getIndex: {
    parameters: {
      path: {
        indexName: string;
      };
    };
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["IndexModel"];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  postIndexRebuild: {
    parameters: {
      path: {
        indexName: string;
      };
    };
    responses: {
      /** 201 response */
      201: unknown;
      /** 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  getSearchers: {
    parameters: {
      query: {
        skip: number;
        take: number;
      };
    };
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["SearcherModel"][];
        };
      };
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  getSearchSearchers: {
    parameters: {
      path: {
        searcherName: string;
      };
      query: {
        query: string;
        take: number;
      };
    };
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchResultsModel"][];
        };
      };
      /** 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
}

export interface external {}
